git ls-tree -rtl HEAD
git show
git restore --staged filename
git log --oneline
git restore --source=HEAD~1 filename

# Git internals
git hash-object --stdin -w
git cat-file -t <hash>
git cat-file -p <hash>
git update-index --add --cacheinfo 100644 <hash> filename.txt
git cat-file  -p <hash> > filename.txt
git write-tree
git cat-file -t <tree hash>
git cat-file -p <tree hash>
git commit-tree <tree hash> -m "commit msg" -p <paresh tree hash>
echo <commit hash > > .git/refs/heads/master
or git update-ref refs/heads/master <commit hash >

# git reset
git reset --soft HEAD~1   (move the pointer to HEAD -1 ; no change in staging area)
git reset --mixed HEAD~1  (move the poitner to HEAD -1;updates to staging area)
git reset --hard HEAD~1 (move the pointer to HEAD -1;updates to staging area;updates working area)

# undo the last commit and make minor changes and commit again: --soft

git log --all --graph --decorate --oneline --simplify-by-decoration

git config --global user.name "Rajesh"
git config --global user.email "rajesh@brainupgrade.in"
git init
git clone <url>

# Other commands
revert restore reset
ls-tree -rtl

git cherry-pic <commitid>
git revert HEAD~1
git reflog
git log -g  (log with reflog)
git show <commidid>

git diff (--staged  index and working dir - default)
git diff --cached  (HEAD and index)
git diff HEAD -- filename  (HEAD and working dir)
git diff --no-index file1 file2
git diff HEAD~1 HEAD > patch1.patch
git reset --hard HEAD~1
git apply patch1.patch

git status --stat
git log --oneline
git log --pretty=format:"%h %s" --graph
git log --pretty=format:"%h - %an, %ar : %s"
git log --pretty=format:"%h - %an, %ar : %s" --since="2 weeks ago"

01 - init,add,commit 
02 - diff (working dir, index, HEAD, remote) 
03 - branch, checkout, merge
04 - rebase, cherry-pick, revert
05 - reset, reflog, log, show
06 - stash, clean, rm, mv
07 - tag
08 - clone, fetch, pull, push